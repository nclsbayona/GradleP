apply plugin: "java"
//Para el run
apply plugin: "application"
sourceCompatibility="1.8"
version="1.0"
//Para saber que debo correr
mainClassName="view.Main"
jar{
    manifest{
        attributes "Main-Class": mainClassName
        //Para añadir más propiedades se pondría , y ya se pueden definir más atributos
    }
}
task hola_mundo {
    ext{
        nombre="Nicolas"
        correo="correo@mail.com"
        github_user="nclsbayona"
    }
    doLast{
        println 'Hola mundo'
    }
}

task adios_mundo{
    doLast{
        //Mostrando propiedades almacenadas en otras tareas
        println 'Hola '+hola_mundo.nombre
    }
}

task prueba_fuego{
    ext{
        nombre="Lucas"
    }
    doLast{
        println 'Hola '+hola_mundo.nombre+' y '+nombre
    }
}

task otrasPruebas{
    //Propiedad
    ext{
        hola="1"
    }
}

otrasPruebas.doLast{
    String nombre="Nicolas"
    println "Fuera de la task "+hola+', '+nombre
}
//Ejemplo dependencia ciclica
task a{
    doLast{
        println 'Tarea A'
    }
}

task b{
    /*dependsOn{
        'a'
    }*/
    doLast{
        println 'Tarea B'
    }
}

task dependencia{
    dependsOn{
        ['a', 'b']
    }
    doFirst{
        System.out.println("Bye");
    }
    doLast{
        println otrasPruebas.hola
    }
}

//mustRunAfter es para decir que debe correr luego de haberse ejecutado otra tarea
//Si se corre a, b , prueba_fuego el orden es 3, 1, 2
a.mustRunAfter 'prueba_fuego'

//Definir condiciones para ejecucion tarea
task tareaA{
    doLast{
        println 'Hola tareaA'
    }
    finalizedBy{
        ['tareaB', 'prueba_fuego']
    }
}

task tareaB{
    dependsOn{
        'tareaA'
    }
    onlyIf{
        tareaA.didWork
        new File("READM.md").exists();
    }
    doLast{
        println 'Ahora B '
    }
}
//Gradle docs tiene tareas que ya fueron creadas
task crearN{
    doLast{
        new File("this").mkdir()
    }
    finalizedBy{
        copiar
    }
}



task ejecutar (type: Exec){
    commandLine 'cat'
    standardOutput=new FileOutputStream("this/salida.txt");
    standardInput=new FileInputStream("this/entrada.txt");
}
task copiar(type: Copy, dependsOn: ejecutar){
    onlyIf{
        ejecutar.didWork
    }
    doLast{
        from 'this'
        into 'this/hola'
    }
    finalizedBy{
        prueba_fuego
    }
}
task compresion(type: Zip, dependsOn: copiar){
    onlyIf{
        copiar.didWork
    }
    doLast{
        from 'this'
        archiveName 'archivoZip.zip'
    }
}
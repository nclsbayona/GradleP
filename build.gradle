plugins{
    id 'java'
    id 'base'
    id 'application'
    id 'jacoco'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

//Para el run
//apply plugin: "application"
//Para las dependencias
repositories{
    mavenCentral()
}

sourceCompatibility="11"
version="1.0.0"
//Para saber que debo correr
mainClassName="view.JFX"

javafx {
    version = "13"
    modules = [ 'javafx.controls','javafx.fxml' ]
}


jar{
    manifest{
        attributes "Main-Class": mainClassName
        //Para añadir más propiedades se pondría , y ya se pueden definir más atributos
    }
}


dependencies{
    /*Se sacan del maven repository
    implementation 'org.openjfx:javafx-fxml:16-ea+4'
    implementation 'org.openjfx:javafx-graphics:16-ea+4'
    implementation 'org.openjfx:javafx-controls:16-ea+4'*/
    //JUnit 5
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
    //JUnit 4 & Before
    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.13.1'
    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.0'
}

//Para JUnit
test{
    useJUnitPlatform{
        //includeEngines 'junit-vintage'
        //excludeEngines 'junit-jupiter'
    }
    testLogging.showStandardStreams=true
    testLogging{
        events 'passed','skipped','failed'
    }
    finalizedBy 'jacocoTestReport'
}


jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/JacocoReports")
}


jacocoTestReport {
    dependsOn test
}

task hola_mundo {
    ext{
        nombre="Nicolas"
        correo="correo@mail.com"
        github_user="nclsbayona"
    }
    doLast{
        println 'Hola mundo'
    }
}

task adios_mundo{
    doLast{
        //Mostrando propiedades almacenadas en otras tareas
        println 'Hola '+hola_mundo.nombre
    }
}

task prueba_fuego{
    ext{
        nombre="Lucas"
    }
    doLast{
        println 'Hola '+hola_mundo.nombre+' y '+nombre
    }
}

task otrasPruebas{
    //Propiedad
    ext{
        hola="1"
    }
}

otrasPruebas.doLast{
    String nombre="Nicolas"
    println "Fuera de la task "+hola+', '+nombre
}
//Ejemplo dependencia ciclica
task a{
    doLast{
        println 'Tarea A'
    }
}

task b{
    /*dependsOn{
        'a'
    }*/
    doLast{
        println 'Tarea B'
    }
}

task dependencia{
    dependsOn{
        ['a', 'b']
    }
    doFirst{
        System.out.println("Bye");
    }
    doLast{
        println otrasPruebas.hola
    }
}

//mustRunAfter es para decir que debe correr luego de haberse ejecutado otra tarea
//Si se corre a, b , prueba_fuego el orden es 3, 1, 2
a.mustRunAfter 'prueba_fuego'

//Definir condiciones para ejecucion tarea
task tareaA{
    doLast{
        println 'Hola tareaA'
    }
    finalizedBy{
        ['tareaB', 'prueba_fuego']
    }
}

task tareaB{
    dependsOn{
        'tareaA'
    }
    onlyIf{
        tareaA.didWork
        new File("README.md").exists();
    }
    doLast{
        println 'Ahora B '
    }
}
//Gradle docs tiene tareas que ya fueron creadas
task crearN{
    doLast{
        new File("this").mkdir()
    }
    finalizedBy{
        copiar
    }
}


task copiar (type: Copy){
    from 'this'
    into 'new'
}

task copiar2(type: Copy){
    from "this/entrada.txt"
    into "new/seg_entrada"
}

//Ni idea por que no sirve 
task compresion (type: Zip){
    archiveFileName = "my-distribution.zip"
    destinationDirectory = file("$buildDir")
    from "$buildDir/new/entrada.txt"
}